var __wpo = {
  "assets": {
    "main": [
      "./memory.js",
      "./vendor.bundle.js",
      "./styles..css",
      "./"
    ],
    "additional": [],
    "optional": []
  },
  "externals": [],
  "hashesMap": {
    "4d6e3e75684d4d047b76afa62350ad7f90f4ed48": "./memory.js",
    "5349561364efe51f9ad19fd9cd3572589cd55e77": "./vendor.bundle.js",
    "989280e6115d98483fe6649e2aa9e26e99753d03": "./styles..css",
    "f9deb7e7baf1683d5142d9792588673b57716aff": "./"
  },
  "strategy": "changed",
  "responseStrategy": "cache-first",
  "version": "2018-1-27 13:58:04",
  "name": "webpack-offline",
  "pluginVersion": "4.9.0",
  "relativePaths": true
};

/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n(function () {\n  var waitUntil = ExtendableEvent.prototype.waitUntil;\n  var respondWith = FetchEvent.prototype.respondWith;\n  var promisesMap = new WeakMap();\n\n  ExtendableEvent.prototype.waitUntil = function (promise) {\n    var extendableEvent = this;\n    var promises = promisesMap.get(extendableEvent);\n\n    if (promises) {\n      promises.push(Promise.resolve(promise));\n      return;\n    }\n\n    promises = [Promise.resolve(promise)];\n    promisesMap.set(extendableEvent, promises);\n\n    // call original method\n    return waitUntil.call(extendableEvent, Promise.resolve().then(function processPromises() {\n      var len = promises.length;\n\n      // wait for all to settle\n      return Promise.all(promises.map(function (p) {\n        return p[\"catch\"](function () {});\n      })).then(function () {\n        // have new items been added? If so, wait again\n        if (promises.length != len) return processPromises();\n        // we're done!\n        promisesMap[\"delete\"](extendableEvent);\n        // reject if one of the promises rejected\n        return Promise.all(promises);\n      });\n    }));\n  };\n\n  FetchEvent.prototype.respondWith = function (promise) {\n    this.waitUntil(promise);\n    return respondWith.call(this, promise);\n  };\n})();;\n        'use strict';\n\nif (typeof DEBUG === 'undefined') {\n  var DEBUG = false;\n}\n\nfunction WebpackServiceWorker(params, helpers) {\n  var loaders = helpers.loaders;\n  var cacheMaps = helpers.cacheMaps;\n  // navigationPreload: true, { map: (URL) => URL, test: (URL) => boolean }\n  var navigationPreload = helpers.navigationPreload;\n\n  // (update)strategy: changed, all\n  var strategy = params.strategy;\n  // responseStrategy: cache-first, network-first\n  var responseStrategy = params.responseStrategy;\n\n  var assets = params.assets;\n  var loadersMap = params.loaders || {};\n\n  var hashesMap = params.hashesMap;\n  var externals = params.externals;\n\n  var CACHE_PREFIX = params.name;\n  var CACHE_TAG = params.version;\n  var CACHE_NAME = CACHE_PREFIX + ':' + CACHE_TAG;\n\n  var PRELOAD_CACHE_NAME = CACHE_PREFIX + '$preload';\n  var STORED_DATA_KEY = '__offline_webpack__data';\n\n  mapAssets();\n\n  var allAssets = [].concat(assets.main, assets.additional, assets.optional);\n\n  // Deprecated {\n  var navigateFallbackURL = params.navigateFallbackURL;\n  var navigateFallbackForRedirects = params.navigateFallbackForRedirects;\n  // }\n\n  self.addEventListener('install', function (event) {\n    console.log('[SW]:', 'Install event');\n\n    var installing = undefined;\n\n    if (strategy === 'changed') {\n      installing = cacheChanged('main');\n    } else {\n      installing = cacheAssets('main');\n    }\n\n    event.waitUntil(installing);\n  });\n\n  self.addEventListener('activate', function (event) {\n    console.log('[SW]:', 'Activate event');\n\n    var activation = cacheAdditional();\n\n    // Delete all assets which name starts with CACHE_PREFIX and\n    // is not current cache (CACHE_NAME)\n    activation = activation.then(storeCacheData);\n    activation = activation.then(deleteObsolete);\n    activation = activation.then(function () {\n      if (self.clients && self.clients.claim) {\n        return self.clients.claim();\n      }\n    });\n\n    if (navigationPreload && self.registration.navigationPreload) {\n      activation = Promise.all([activation, self.registration.navigationPreload.enable()]);\n    }\n\n    event.waitUntil(activation);\n  });\n\n  function cacheAdditional() {\n    if (!assets.additional.length) {\n      return Promise.resolve();\n    }\n\n    if (DEBUG) {\n      console.log('[SW]:', 'Caching additional');\n    }\n\n    var operation = undefined;\n\n    if (strategy === 'changed') {\n      operation = cacheChanged('additional');\n    } else {\n      operation = cacheAssets('additional');\n    }\n\n    // Ignore fail of `additional` cache section\n    return operation['catch'](function (e) {\n      console.error('[SW]:', 'Cache section `additional` failed to load');\n    });\n  }\n\n  function cacheAssets(section) {\n    var batch = assets[section];\n\n    return caches.open(CACHE_NAME).then(function (cache) {\n      return addAllNormalized(cache, batch, {\n        bust: params.version,\n        request: params.prefetchRequest\n      });\n    }).then(function () {\n      logGroup('Cached assets: ' + section, batch);\n    })['catch'](function (e) {\n      console.error(e);\n      throw e;\n    });\n  }\n\n  function cacheChanged(section) {\n    return getLastCache().then(function (args) {\n      if (!args) {\n        return cacheAssets(section);\n      }\n\n      var lastCache = args[0];\n      var lastKeys = args[1];\n      var lastData = args[2];\n\n      var lastMap = lastData.hashmap;\n      var lastVersion = lastData.version;\n\n      if (!lastData.hashmap || lastVersion === params.version) {\n        return cacheAssets(section);\n      }\n\n      var lastHashedAssets = Object.keys(lastMap).map(function (hash) {\n        return lastMap[hash];\n      });\n\n      var lastUrls = lastKeys.map(function (req) {\n        var url = new URL(req.url);\n        url.search = '';\n        url.hash = '';\n\n        return url.toString();\n      });\n\n      var sectionAssets = assets[section];\n      var moved = [];\n      var changed = sectionAssets.filter(function (url) {\n        if (lastUrls.indexOf(url) === -1 || lastHashedAssets.indexOf(url) === -1) {\n          return true;\n        }\n\n        return false;\n      });\n\n      Object.keys(hashesMap).forEach(function (hash) {\n        var asset = hashesMap[hash];\n\n        // Return if not in sectionAssets or in changed or moved array\n        if (sectionAssets.indexOf(asset) === -1 || changed.indexOf(asset) !== -1 || moved.indexOf(asset) !== -1) return;\n\n        var lastAsset = lastMap[hash];\n\n        if (lastAsset && lastUrls.indexOf(lastAsset) !== -1) {\n          moved.push([lastAsset, asset]);\n        } else {\n          changed.push(asset);\n        }\n      });\n\n      logGroup('Changed assets: ' + section, changed);\n      logGroup('Moved assets: ' + section, moved);\n\n      var movedResponses = Promise.all(moved.map(function (pair) {\n        return lastCache.match(pair[0]).then(function (response) {\n          return [pair[1], response];\n        });\n      }));\n\n      return caches.open(CACHE_NAME).then(function (cache) {\n        var move = movedResponses.then(function (responses) {\n          return Promise.all(responses.map(function (pair) {\n            return cache.put(pair[0], pair[1]);\n          }));\n        });\n\n        return Promise.all([move, addAllNormalized(cache, changed, {\n          bust: params.version,\n          request: params.prefetchRequest\n        })]);\n      });\n    });\n  }\n\n  function deleteObsolete() {\n    return caches.keys().then(function (keys) {\n      var all = keys.map(function (key) {\n        if (key.indexOf(CACHE_PREFIX) !== 0 || key.indexOf(CACHE_NAME) === 0) return;\n\n        console.log('[SW]:', 'Delete cache:', key);\n        return caches['delete'](key);\n      });\n\n      return Promise.all(all);\n    });\n  }\n\n  function getLastCache() {\n    return caches.keys().then(function (keys) {\n      var index = keys.length;\n      var key = undefined;\n\n      while (index--) {\n        key = keys[index];\n\n        if (key.indexOf(CACHE_PREFIX) === 0) {\n          break;\n        }\n      }\n\n      if (!key) return;\n\n      var cache = undefined;\n\n      return caches.open(key).then(function (_cache) {\n        cache = _cache;\n        return _cache.match(new URL(STORED_DATA_KEY, location).toString());\n      }).then(function (response) {\n        if (!response) return;\n\n        return Promise.all([cache, cache.keys(), response.json()]);\n      });\n    });\n  }\n\n  function storeCacheData() {\n    return caches.open(CACHE_NAME).then(function (cache) {\n      var data = new Response(JSON.stringify({\n        version: params.version,\n        hashmap: hashesMap\n      }));\n\n      return cache.put(new URL(STORED_DATA_KEY, location).toString(), data);\n    });\n  }\n\n  self.addEventListener('fetch', function (event) {\n    var url = new URL(event.request.url);\n    url.hash = '';\n\n    var urlString = url.toString();\n\n    // Not external, so search part of the URL should be stripped,\n    // if it's external URL, the search part should be kept\n    if (externals.indexOf(urlString) === -1) {\n      url.search = '';\n      urlString = url.toString();\n    }\n\n    // Handle only GET requests\n    var isGET = event.request.method === 'GET';\n    var assetMatches = allAssets.indexOf(urlString) !== -1;\n    var cacheUrl = urlString;\n\n    if (!assetMatches) {\n      var cacheRewrite = matchCacheMap(event.request);\n\n      if (cacheRewrite) {\n        cacheUrl = cacheRewrite;\n        assetMatches = true;\n      }\n    }\n\n    if (!assetMatches && isGET) {\n      // If isn't a cached asset and is a navigation request,\n      // perform network request and fallback to navigateFallbackURL if available.\n      //\n      // Requesting with fetchWithPreload().\n      // Preload is used only if navigationPreload is enabled and\n      // navigationPreload mapping is not used.\n      if (navigateFallbackURL && isNavigateRequest(event.request)) {\n        event.respondWith(handleNavigateFallback(fetchWithPreload(event)));\n\n        return;\n      }\n\n      if (navigationPreload === true) {\n        event.respondWith(fetchWithPreload(event));\n        return;\n      }\n\n      // Something else, positive, but not `true`\n      if (navigationPreload) {\n        var preloadedResponse = retrivePreloadedResponse(event);\n\n        if (preloadedResponse) {\n          event.respondWith(preloadedResponse);\n          return;\n        }\n      }\n\n      // Logic exists here if no cache match, or no preload\n      return;\n    }\n\n    if (!assetMatches || !isGET) {\n      // Fix for https://twitter.com/wanderview/status/696819243262873600\n      if (url.origin !== location.origin && navigator.userAgent.indexOf('Firefox/44.') !== -1) {\n        event.respondWith(fetch(event.request));\n      }\n\n      // Logic exists here if no cache match\n      return;\n    }\n\n    // Cache handling/storing/fetching starts here\n\n    var resource = undefined;\n\n    if (responseStrategy === 'network-first') {\n      resource = networkFirstResponse(event, urlString, cacheUrl);\n    }\n    // 'cache-first' otherwise\n    // (responseStrategy has been validated before)\n    else {\n        resource = cacheFirstResponse(event, urlString, cacheUrl);\n      }\n\n    if (navigateFallbackURL && isNavigateRequest(event.request)) {\n      resource = handleNavigateFallback(resource);\n    }\n\n    event.respondWith(resource);\n  });\n\n  self.addEventListener('message', function (e) {\n    var data = e.data;\n    if (!data) return;\n\n    switch (data.action) {\n      case 'skipWaiting':\n        {\n          if (self.skipWaiting) self.skipWaiting();\n        }break;\n    }\n  });\n\n  function cacheFirstResponse(event, urlString, cacheUrl) {\n    handleNavigationPreload(event);\n\n    return cachesMatch(cacheUrl, CACHE_NAME).then(function (response) {\n      if (response) {\n        if (DEBUG) {\n          console.log('[SW]:', 'URL [' + cacheUrl + '](' + urlString + ') from cache');\n        }\n\n        return response;\n      }\n\n      // Load and cache known assets\n      var fetching = fetch(event.request).then(function (response) {\n        if (!response.ok) {\n          if (DEBUG) {\n            console.log('[SW]:', 'URL [' + urlString + '] wrong response: [' + response.status + '] ' + response.type);\n          }\n\n          return response;\n        }\n\n        if (DEBUG) {\n          console.log('[SW]:', 'URL [' + urlString + '] from network');\n        }\n\n        if (cacheUrl === urlString) {\n          (function () {\n            var responseClone = response.clone();\n            var storing = caches.open(CACHE_NAME).then(function (cache) {\n              return cache.put(urlString, responseClone);\n            }).then(function () {\n              console.log('[SW]:', 'Cache asset: ' + urlString);\n            });\n\n            event.waitUntil(storing);\n          })();\n        }\n\n        return response;\n      });\n\n      return fetching;\n    });\n  }\n\n  function networkFirstResponse(event, urlString, cacheUrl) {\n    return fetchWithPreload(event).then(function (response) {\n      if (response.ok) {\n        if (DEBUG) {\n          console.log('[SW]:', 'URL [' + urlString + '] from network');\n        }\n\n        return response;\n      }\n\n      // Throw to reach the code in the catch below\n      throw new Error('Response is not ok');\n    })\n    // This needs to be in a catch() and not just in the then() above\n    // cause if your network is down, the fetch() will throw\n    ['catch'](function () {\n      if (DEBUG) {\n        console.log('[SW]:', 'URL [' + urlString + '] from cache if possible');\n      }\n\n      return cachesMatch(cacheUrl, CACHE_NAME);\n    });\n  }\n\n  function handleNavigationPreload(event) {\n    if (navigationPreload && typeof navigationPreload.map === 'function' &&\n    // Use request.mode === 'navigate' instead of isNavigateRequest\n    // because everything what supports navigationPreload supports\n    // 'navigate' request.mode\n    event.preloadResponse && event.request.mode === 'navigate') {\n      var mapped = navigationPreload.map(new URL(event.request.url), event.request);\n\n      if (mapped) {\n        storePreloadedResponse(mapped, event);\n      }\n    }\n  }\n\n  // Temporary in-memory store for faster access\n  var navigationPreloadStore = new Map();\n\n  function storePreloadedResponse(_url, event) {\n    var url = new URL(_url, location);\n    var preloadResponsePromise = event.preloadResponse;\n\n    navigationPreloadStore.set(preloadResponsePromise, {\n      url: url,\n      response: preloadResponsePromise\n    });\n\n    var isSamePreload = function isSamePreload() {\n      return navigationPreloadStore.has(preloadResponsePromise);\n    };\n\n    var storing = preloadResponsePromise.then(function (res) {\n      // Return if preload isn't enabled or hasn't happened\n      if (!res) return;\n\n      // If navigationPreloadStore already consumed\n      // or navigationPreloadStore already contains another preload,\n      // then do not store anything and return\n      if (!isSamePreload()) {\n        return;\n      }\n\n      var clone = res.clone();\n\n      // Storing the preload response for later consume (hasn't yet been consumed)\n      return caches.open(PRELOAD_CACHE_NAME).then(function (cache) {\n        if (!isSamePreload()) return;\n\n        return cache.put(url, clone).then(function () {\n          if (!isSamePreload()) {\n            return caches.open(PRELOAD_CACHE_NAME).then(function (cache) {\n              return cache['delete'](url);\n            });\n          }\n        });\n      });\n    });\n\n    event.waitUntil(storing);\n  }\n\n  function retriveInMemoryPreloadedResponse(url) {\n    if (!navigationPreloadStore) {\n      return;\n    }\n\n    var foundResponse = undefined;\n    var foundKey = undefined;\n\n    navigationPreloadStore.forEach(function (store, key) {\n      if (store.url.href === url.href) {\n        foundResponse = store.response;\n        foundKey = key;\n      }\n    });\n\n    if (foundResponse) {\n      navigationPreloadStore['delete'](foundKey);\n      return foundResponse;\n    }\n  }\n\n  function retrivePreloadedResponse(event) {\n    var url = new URL(event.request.url);\n\n    if (self.registration.navigationPreload && navigationPreload && navigationPreload.test && navigationPreload.test(url, event.request)) {} else {\n      return;\n    }\n\n    var fromMemory = retriveInMemoryPreloadedResponse(url);\n    var request = event.request;\n\n    if (fromMemory) {\n      event.waitUntil(caches.open(PRELOAD_CACHE_NAME).then(function (cache) {\n        return cache['delete'](request);\n      }));\n\n      return fromMemory;\n    }\n\n    return cachesMatch(request, PRELOAD_CACHE_NAME).then(function (response) {\n      if (response) {\n        event.waitUntil(caches.open(PRELOAD_CACHE_NAME).then(function (cache) {\n          return cache['delete'](request);\n        }));\n      }\n\n      return response || fetch(event.request);\n    });\n  }\n\n  function handleNavigateFallback(fetching) {\n    return fetching['catch'](function () {}).then(function (response) {\n      var isOk = response && response.ok;\n      var isRedirect = response && response.type === 'opaqueredirect';\n\n      if (isOk || isRedirect && !navigateFallbackForRedirects) {\n        return response;\n      }\n\n      if (DEBUG) {\n        console.log('[SW]:', 'Loading navigation fallback [' + navigateFallbackURL + '] from cache');\n      }\n\n      return cachesMatch(navigateFallbackURL, CACHE_NAME);\n    });\n  }\n\n  function mapAssets() {\n    Object.keys(assets).forEach(function (key) {\n      assets[key] = assets[key].map(function (path) {\n        var url = new URL(path, location);\n\n        url.hash = '';\n\n        if (externals.indexOf(path) === -1) {\n          url.search = '';\n        }\n\n        return url.toString();\n      });\n    });\n\n    Object.keys(loadersMap).forEach(function (key) {\n      loadersMap[key] = loadersMap[key].map(function (path) {\n        var url = new URL(path, location);\n\n        url.hash = '';\n\n        if (externals.indexOf(path) === -1) {\n          url.search = '';\n        }\n\n        return url.toString();\n      });\n    });\n\n    hashesMap = Object.keys(hashesMap).reduce(function (result, hash) {\n      var url = new URL(hashesMap[hash], location);\n      url.search = '';\n      url.hash = '';\n\n      result[hash] = url.toString();\n      return result;\n    }, {});\n\n    externals = externals.map(function (path) {\n      var url = new URL(path, location);\n      url.hash = '';\n\n      return url.toString();\n    });\n  }\n\n  function addAllNormalized(cache, requests, options) {\n    var allowLoaders = options.allowLoaders !== false;\n    var bustValue = options && options.bust;\n    var requestInit = options.request || {\n      credentials: 'omit',\n      mode: 'cors'\n    };\n\n    return Promise.all(requests.map(function (request) {\n      if (bustValue) {\n        request = applyCacheBust(request, bustValue);\n      }\n\n      return fetch(request, requestInit).then(fixRedirectedResponse);\n    })).then(function (responses) {\n      if (responses.some(function (response) {\n        return !response.ok;\n      })) {\n        return Promise.reject(new Error('Wrong response status'));\n      }\n\n      var extracted = [];\n      var addAll = responses.map(function (response, i) {\n        if (allowLoaders) {\n          extracted.push(extractAssetsWithLoaders(requests[i], response));\n        }\n\n        return cache.put(requests[i], response);\n      });\n\n      if (extracted.length) {\n        (function () {\n          var newOptions = copyObject(options);\n          newOptions.allowLoaders = false;\n\n          var waitAll = addAll;\n\n          addAll = Promise.all(extracted).then(function (all) {\n            var extractedRequests = [].concat.apply([], all);\n\n            if (requests.length) {\n              waitAll = waitAll.concat(addAllNormalized(cache, extractedRequests, newOptions));\n            }\n\n            return Promise.all(waitAll);\n          });\n        })();\n      } else {\n        addAll = Promise.all(addAll);\n      }\n\n      return addAll;\n    });\n  }\n\n  function extractAssetsWithLoaders(request, response) {\n    var all = Object.keys(loadersMap).map(function (key) {\n      var loader = loadersMap[key];\n\n      if (loader.indexOf(request) !== -1 && loaders[key]) {\n        return loaders[key](response.clone());\n      }\n    }).filter(function (a) {\n      return !!a;\n    });\n\n    return Promise.all(all).then(function (all) {\n      return [].concat.apply([], all);\n    });\n  }\n\n  function matchCacheMap(request) {\n    var urlString = request.url;\n    var url = new URL(urlString);\n\n    var requestType = undefined;\n\n    if (isNavigateRequest(request)) {\n      requestType = 'navigate';\n    } else if (url.origin === location.origin) {\n      requestType = 'same-origin';\n    } else {\n      requestType = 'cross-origin';\n    }\n\n    for (var i = 0; i < cacheMaps.length; i++) {\n      var map = cacheMaps[i];\n\n      if (!map) continue;\n      if (map.requestTypes && map.requestTypes.indexOf(requestType) === -1) {\n        continue;\n      }\n\n      var newString = undefined;\n\n      if (typeof map.match === 'function') {\n        newString = map.match(url, request);\n      } else {\n        newString = urlString.replace(map.match, map.to);\n      }\n\n      if (newString && newString !== urlString) {\n        return newString;\n      }\n    }\n  }\n\n  function fetchWithPreload(event) {\n    if (!event.preloadResponse || navigationPreload !== true) {\n      return fetch(event.request);\n    }\n\n    return event.preloadResponse.then(function (response) {\n      return response || fetch(event.request);\n    });\n  }\n}\n\nfunction cachesMatch(request, cacheName) {\n  return caches.match(request, {\n    cacheName: cacheName\n  }).then(function (response) {\n    if (isNotRedirectedResponse()) {\n      return response;\n    }\n\n    // Fix already cached redirected responses\n    return fixRedirectedResponse(response).then(function (fixedResponse) {\n      return caches.open(cacheName).then(function (cache) {\n        return cache.put(request, fixedResponse);\n      }).then(function () {\n        return fixedResponse;\n      });\n    });\n  })\n  // Return void if error happened (cache not found)\n  ['catch'](function () {});\n}\n\nfunction applyCacheBust(asset, key) {\n  var hasQuery = asset.indexOf('?') !== -1;\n  return asset + (hasQuery ? '&' : '?') + '__uncache=' + encodeURIComponent(key);\n}\n\nfunction isNavigateRequest(request) {\n  return request.mode === 'navigate' || request.headers.get('Upgrade-Insecure-Requests') || (request.headers.get('Accept') || '').indexOf('text/html') !== -1;\n}\n\nfunction isNotRedirectedResponse(response) {\n  return !response || !response.redirected || !response.ok || response.type === 'opaqueredirect';\n}\n\n// Based on https://github.com/GoogleChrome/sw-precache/pull/241/files#diff-3ee9060dc7a312c6a822cac63a8c630bR85\nfunction fixRedirectedResponse(response) {\n  if (isNotRedirectedResponse(response)) {\n    return Promise.resolve(response);\n  }\n\n  var body = 'body' in response ? Promise.resolve(response.body) : response.blob();\n\n  return body.then(function (data) {\n    return new Response(data, {\n      headers: response.headers,\n      status: response.status\n    });\n  });\n}\n\nfunction copyObject(original) {\n  return Object.keys(original).reduce(function (result, key) {\n    result[key] = original[key];\n    return result;\n  }, {});\n}\n\nfunction logGroup(title, assets) {\n  console.groupCollapsed('[SW]:', title);\n\n  assets.forEach(function (asset) {\n    console.log('Asset:', asset);\n  });\n\n  console.groupEnd();\n}\n        WebpackServiceWorker(__wpo, {\nloaders: {},\ncacheMaps: [],\nnavigationPreload: false,\n});\n        module.exports = __webpack_require__(1)\n      //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb2ZmbGluZS1wbHVnaW4vdHBscy9lbXB0eS1lbnRyeS5qcz83MjZlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esd0NBQXdDO0FBQ3hDLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0I7QUFDL0I7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLE9BQU87O0FBRVA7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsT0FBTzs7QUFFUDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsT0FBTzs7QUFFUDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYLFNBQVM7O0FBRVQ7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULE9BQU87QUFDUCxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLE9BQU87O0FBRVA7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7O0FBRUE7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPOztBQUVQO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsR0FBRzs7QUFFSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLGFBQWE7O0FBRWI7QUFDQSxXQUFXO0FBQ1g7O0FBRUE7QUFDQSxPQUFPOztBQUVQO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxTQUFTO0FBQ1QsT0FBTztBQUNQLEtBQUs7O0FBRUw7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSw0SUFBNEk7QUFDNUk7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE9BQU87O0FBRVA7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDs7QUFFQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBLDJDQUEyQztBQUMzQztBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsT0FBTztBQUNQLEtBQUs7O0FBRUw7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLE9BQU87QUFDUCxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxLQUFLLElBQUk7O0FBRVQ7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFdBQVc7QUFDWCxTQUFTO0FBQ1QsT0FBTztBQUNQO0FBQ0E7O0FBRUE7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBLG1CQUFtQixzQkFBc0I7QUFDekM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMLEdBQUc7QUFDSDtBQUNBLDBCQUEwQjtBQUMxQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRyxJQUFJO0FBQ1A7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBLENBQUM7QUFDRCIsImZpbGUiOiIwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbihmdW5jdGlvbiAoKSB7XG4gIHZhciB3YWl0VW50aWwgPSBFeHRlbmRhYmxlRXZlbnQucHJvdG90eXBlLndhaXRVbnRpbDtcbiAgdmFyIHJlc3BvbmRXaXRoID0gRmV0Y2hFdmVudC5wcm90b3R5cGUucmVzcG9uZFdpdGg7XG4gIHZhciBwcm9taXNlc01hcCA9IG5ldyBXZWFrTWFwKCk7XG5cbiAgRXh0ZW5kYWJsZUV2ZW50LnByb3RvdHlwZS53YWl0VW50aWwgPSBmdW5jdGlvbiAocHJvbWlzZSkge1xuICAgIHZhciBleHRlbmRhYmxlRXZlbnQgPSB0aGlzO1xuICAgIHZhciBwcm9taXNlcyA9IHByb21pc2VzTWFwLmdldChleHRlbmRhYmxlRXZlbnQpO1xuXG4gICAgaWYgKHByb21pc2VzKSB7XG4gICAgICBwcm9taXNlcy5wdXNoKFByb21pc2UucmVzb2x2ZShwcm9taXNlKSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcHJvbWlzZXMgPSBbUHJvbWlzZS5yZXNvbHZlKHByb21pc2UpXTtcbiAgICBwcm9taXNlc01hcC5zZXQoZXh0ZW5kYWJsZUV2ZW50LCBwcm9taXNlcyk7XG5cbiAgICAvLyBjYWxsIG9yaWdpbmFsIG1ldGhvZFxuICAgIHJldHVybiB3YWl0VW50aWwuY2FsbChleHRlbmRhYmxlRXZlbnQsIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oZnVuY3Rpb24gcHJvY2Vzc1Byb21pc2VzKCkge1xuICAgICAgdmFyIGxlbiA9IHByb21pc2VzLmxlbmd0aDtcblxuICAgICAgLy8gd2FpdCBmb3IgYWxsIHRvIHNldHRsZVxuICAgICAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzLm1hcChmdW5jdGlvbiAocCkge1xuICAgICAgICByZXR1cm4gcFtcImNhdGNoXCJdKGZ1bmN0aW9uICgpIHt9KTtcbiAgICAgIH0pKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gaGF2ZSBuZXcgaXRlbXMgYmVlbiBhZGRlZD8gSWYgc28sIHdhaXQgYWdhaW5cbiAgICAgICAgaWYgKHByb21pc2VzLmxlbmd0aCAhPSBsZW4pIHJldHVybiBwcm9jZXNzUHJvbWlzZXMoKTtcbiAgICAgICAgLy8gd2UncmUgZG9uZSFcbiAgICAgICAgcHJvbWlzZXNNYXBbXCJkZWxldGVcIl0oZXh0ZW5kYWJsZUV2ZW50KTtcbiAgICAgICAgLy8gcmVqZWN0IGlmIG9uZSBvZiB0aGUgcHJvbWlzZXMgcmVqZWN0ZWRcbiAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKTtcbiAgICAgIH0pO1xuICAgIH0pKTtcbiAgfTtcblxuICBGZXRjaEV2ZW50LnByb3RvdHlwZS5yZXNwb25kV2l0aCA9IGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gICAgdGhpcy53YWl0VW50aWwocHJvbWlzZSk7XG4gICAgcmV0dXJuIHJlc3BvbmRXaXRoLmNhbGwodGhpcywgcHJvbWlzZSk7XG4gIH07XG59KSgpOztcbiAgICAgICAgJ3VzZSBzdHJpY3QnO1xuXG5pZiAodHlwZW9mIERFQlVHID09PSAndW5kZWZpbmVkJykge1xuICB2YXIgREVCVUcgPSBmYWxzZTtcbn1cblxuZnVuY3Rpb24gV2VicGFja1NlcnZpY2VXb3JrZXIocGFyYW1zLCBoZWxwZXJzKSB7XG4gIHZhciBsb2FkZXJzID0gaGVscGVycy5sb2FkZXJzO1xuICB2YXIgY2FjaGVNYXBzID0gaGVscGVycy5jYWNoZU1hcHM7XG4gIC8vIG5hdmlnYXRpb25QcmVsb2FkOiB0cnVlLCB7IG1hcDogKFVSTCkgPT4gVVJMLCB0ZXN0OiAoVVJMKSA9PiBib29sZWFuIH1cbiAgdmFyIG5hdmlnYXRpb25QcmVsb2FkID0gaGVscGVycy5uYXZpZ2F0aW9uUHJlbG9hZDtcblxuICAvLyAodXBkYXRlKXN0cmF0ZWd5OiBjaGFuZ2VkLCBhbGxcbiAgdmFyIHN0cmF0ZWd5ID0gcGFyYW1zLnN0cmF0ZWd5O1xuICAvLyByZXNwb25zZVN0cmF0ZWd5OiBjYWNoZS1maXJzdCwgbmV0d29yay1maXJzdFxuICB2YXIgcmVzcG9uc2VTdHJhdGVneSA9IHBhcmFtcy5yZXNwb25zZVN0cmF0ZWd5O1xuXG4gIHZhciBhc3NldHMgPSBwYXJhbXMuYXNzZXRzO1xuICB2YXIgbG9hZGVyc01hcCA9IHBhcmFtcy5sb2FkZXJzIHx8IHt9O1xuXG4gIHZhciBoYXNoZXNNYXAgPSBwYXJhbXMuaGFzaGVzTWFwO1xuICB2YXIgZXh0ZXJuYWxzID0gcGFyYW1zLmV4dGVybmFscztcblxuICB2YXIgQ0FDSEVfUFJFRklYID0gcGFyYW1zLm5hbWU7XG4gIHZhciBDQUNIRV9UQUcgPSBwYXJhbXMudmVyc2lvbjtcbiAgdmFyIENBQ0hFX05BTUUgPSBDQUNIRV9QUkVGSVggKyAnOicgKyBDQUNIRV9UQUc7XG5cbiAgdmFyIFBSRUxPQURfQ0FDSEVfTkFNRSA9IENBQ0hFX1BSRUZJWCArICckcHJlbG9hZCc7XG4gIHZhciBTVE9SRURfREFUQV9LRVkgPSAnX19vZmZsaW5lX3dlYnBhY2tfX2RhdGEnO1xuXG4gIG1hcEFzc2V0cygpO1xuXG4gIHZhciBhbGxBc3NldHMgPSBbXS5jb25jYXQoYXNzZXRzLm1haW4sIGFzc2V0cy5hZGRpdGlvbmFsLCBhc3NldHMub3B0aW9uYWwpO1xuXG4gIC8vIERlcHJlY2F0ZWQge1xuICB2YXIgbmF2aWdhdGVGYWxsYmFja1VSTCA9IHBhcmFtcy5uYXZpZ2F0ZUZhbGxiYWNrVVJMO1xuICB2YXIgbmF2aWdhdGVGYWxsYmFja0ZvclJlZGlyZWN0cyA9IHBhcmFtcy5uYXZpZ2F0ZUZhbGxiYWNrRm9yUmVkaXJlY3RzO1xuICAvLyB9XG5cbiAgc2VsZi5hZGRFdmVudExpc3RlbmVyKCdpbnN0YWxsJywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgY29uc29sZS5sb2coJ1tTV106JywgJ0luc3RhbGwgZXZlbnQnKTtcblxuICAgIHZhciBpbnN0YWxsaW5nID0gdW5kZWZpbmVkO1xuXG4gICAgaWYgKHN0cmF0ZWd5ID09PSAnY2hhbmdlZCcpIHtcbiAgICAgIGluc3RhbGxpbmcgPSBjYWNoZUNoYW5nZWQoJ21haW4nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaW5zdGFsbGluZyA9IGNhY2hlQXNzZXRzKCdtYWluJyk7XG4gICAgfVxuXG4gICAgZXZlbnQud2FpdFVudGlsKGluc3RhbGxpbmcpO1xuICB9KTtcblxuICBzZWxmLmFkZEV2ZW50TGlzdGVuZXIoJ2FjdGl2YXRlJywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgY29uc29sZS5sb2coJ1tTV106JywgJ0FjdGl2YXRlIGV2ZW50Jyk7XG5cbiAgICB2YXIgYWN0aXZhdGlvbiA9IGNhY2hlQWRkaXRpb25hbCgpO1xuXG4gICAgLy8gRGVsZXRlIGFsbCBhc3NldHMgd2hpY2ggbmFtZSBzdGFydHMgd2l0aCBDQUNIRV9QUkVGSVggYW5kXG4gICAgLy8gaXMgbm90IGN1cnJlbnQgY2FjaGUgKENBQ0hFX05BTUUpXG4gICAgYWN0aXZhdGlvbiA9IGFjdGl2YXRpb24udGhlbihzdG9yZUNhY2hlRGF0YSk7XG4gICAgYWN0aXZhdGlvbiA9IGFjdGl2YXRpb24udGhlbihkZWxldGVPYnNvbGV0ZSk7XG4gICAgYWN0aXZhdGlvbiA9IGFjdGl2YXRpb24udGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoc2VsZi5jbGllbnRzICYmIHNlbGYuY2xpZW50cy5jbGFpbSkge1xuICAgICAgICByZXR1cm4gc2VsZi5jbGllbnRzLmNsYWltKCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpZiAobmF2aWdhdGlvblByZWxvYWQgJiYgc2VsZi5yZWdpc3RyYXRpb24ubmF2aWdhdGlvblByZWxvYWQpIHtcbiAgICAgIGFjdGl2YXRpb24gPSBQcm9taXNlLmFsbChbYWN0aXZhdGlvbiwgc2VsZi5yZWdpc3RyYXRpb24ubmF2aWdhdGlvblByZWxvYWQuZW5hYmxlKCldKTtcbiAgICB9XG5cbiAgICBldmVudC53YWl0VW50aWwoYWN0aXZhdGlvbik7XG4gIH0pO1xuXG4gIGZ1bmN0aW9uIGNhY2hlQWRkaXRpb25hbCgpIHtcbiAgICBpZiAoIWFzc2V0cy5hZGRpdGlvbmFsLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgIH1cblxuICAgIGlmIChERUJVRykge1xuICAgICAgY29uc29sZS5sb2coJ1tTV106JywgJ0NhY2hpbmcgYWRkaXRpb25hbCcpO1xuICAgIH1cblxuICAgIHZhciBvcGVyYXRpb24gPSB1bmRlZmluZWQ7XG5cbiAgICBpZiAoc3RyYXRlZ3kgPT09ICdjaGFuZ2VkJykge1xuICAgICAgb3BlcmF0aW9uID0gY2FjaGVDaGFuZ2VkKCdhZGRpdGlvbmFsJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9wZXJhdGlvbiA9IGNhY2hlQXNzZXRzKCdhZGRpdGlvbmFsJyk7XG4gICAgfVxuXG4gICAgLy8gSWdub3JlIGZhaWwgb2YgYGFkZGl0aW9uYWxgIGNhY2hlIHNlY3Rpb25cbiAgICByZXR1cm4gb3BlcmF0aW9uWydjYXRjaCddKGZ1bmN0aW9uIChlKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdbU1ddOicsICdDYWNoZSBzZWN0aW9uIGBhZGRpdGlvbmFsYCBmYWlsZWQgdG8gbG9hZCcpO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gY2FjaGVBc3NldHMoc2VjdGlvbikge1xuICAgIHZhciBiYXRjaCA9IGFzc2V0c1tzZWN0aW9uXTtcblxuICAgIHJldHVybiBjYWNoZXMub3BlbihDQUNIRV9OQU1FKS50aGVuKGZ1bmN0aW9uIChjYWNoZSkge1xuICAgICAgcmV0dXJuIGFkZEFsbE5vcm1hbGl6ZWQoY2FjaGUsIGJhdGNoLCB7XG4gICAgICAgIGJ1c3Q6IHBhcmFtcy52ZXJzaW9uLFxuICAgICAgICByZXF1ZXN0OiBwYXJhbXMucHJlZmV0Y2hSZXF1ZXN0XG4gICAgICB9KTtcbiAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgIGxvZ0dyb3VwKCdDYWNoZWQgYXNzZXRzOiAnICsgc2VjdGlvbiwgYmF0Y2gpO1xuICAgIH0pWydjYXRjaCddKGZ1bmN0aW9uIChlKSB7XG4gICAgICBjb25zb2xlLmVycm9yKGUpO1xuICAgICAgdGhyb3cgZTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNhY2hlQ2hhbmdlZChzZWN0aW9uKSB7XG4gICAgcmV0dXJuIGdldExhc3RDYWNoZSgpLnRoZW4oZnVuY3Rpb24gKGFyZ3MpIHtcbiAgICAgIGlmICghYXJncykge1xuICAgICAgICByZXR1cm4gY2FjaGVBc3NldHMoc2VjdGlvbik7XG4gICAgICB9XG5cbiAgICAgIHZhciBsYXN0Q2FjaGUgPSBhcmdzWzBdO1xuICAgICAgdmFyIGxhc3RLZXlzID0gYXJnc1sxXTtcbiAgICAgIHZhciBsYXN0RGF0YSA9IGFyZ3NbMl07XG5cbiAgICAgIHZhciBsYXN0TWFwID0gbGFzdERhdGEuaGFzaG1hcDtcbiAgICAgIHZhciBsYXN0VmVyc2lvbiA9IGxhc3REYXRhLnZlcnNpb247XG5cbiAgICAgIGlmICghbGFzdERhdGEuaGFzaG1hcCB8fCBsYXN0VmVyc2lvbiA9PT0gcGFyYW1zLnZlcnNpb24pIHtcbiAgICAgICAgcmV0dXJuIGNhY2hlQXNzZXRzKHNlY3Rpb24pO1xuICAgICAgfVxuXG4gICAgICB2YXIgbGFzdEhhc2hlZEFzc2V0cyA9IE9iamVjdC5rZXlzKGxhc3RNYXApLm1hcChmdW5jdGlvbiAoaGFzaCkge1xuICAgICAgICByZXR1cm4gbGFzdE1hcFtoYXNoXTtcbiAgICAgIH0pO1xuXG4gICAgICB2YXIgbGFzdFVybHMgPSBsYXN0S2V5cy5tYXAoZnVuY3Rpb24gKHJlcSkge1xuICAgICAgICB2YXIgdXJsID0gbmV3IFVSTChyZXEudXJsKTtcbiAgICAgICAgdXJsLnNlYXJjaCA9ICcnO1xuICAgICAgICB1cmwuaGFzaCA9ICcnO1xuXG4gICAgICAgIHJldHVybiB1cmwudG9TdHJpbmcoKTtcbiAgICAgIH0pO1xuXG4gICAgICB2YXIgc2VjdGlvbkFzc2V0cyA9IGFzc2V0c1tzZWN0aW9uXTtcbiAgICAgIHZhciBtb3ZlZCA9IFtdO1xuICAgICAgdmFyIGNoYW5nZWQgPSBzZWN0aW9uQXNzZXRzLmZpbHRlcihmdW5jdGlvbiAodXJsKSB7XG4gICAgICAgIGlmIChsYXN0VXJscy5pbmRleE9mKHVybCkgPT09IC0xIHx8IGxhc3RIYXNoZWRBc3NldHMuaW5kZXhPZih1cmwpID09PSAtMSkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfSk7XG5cbiAgICAgIE9iamVjdC5rZXlzKGhhc2hlc01hcCkuZm9yRWFjaChmdW5jdGlvbiAoaGFzaCkge1xuICAgICAgICB2YXIgYXNzZXQgPSBoYXNoZXNNYXBbaGFzaF07XG5cbiAgICAgICAgLy8gUmV0dXJuIGlmIG5vdCBpbiBzZWN0aW9uQXNzZXRzIG9yIGluIGNoYW5nZWQgb3IgbW92ZWQgYXJyYXlcbiAgICAgICAgaWYgKHNlY3Rpb25Bc3NldHMuaW5kZXhPZihhc3NldCkgPT09IC0xIHx8IGNoYW5nZWQuaW5kZXhPZihhc3NldCkgIT09IC0xIHx8IG1vdmVkLmluZGV4T2YoYXNzZXQpICE9PSAtMSkgcmV0dXJuO1xuXG4gICAgICAgIHZhciBsYXN0QXNzZXQgPSBsYXN0TWFwW2hhc2hdO1xuXG4gICAgICAgIGlmIChsYXN0QXNzZXQgJiYgbGFzdFVybHMuaW5kZXhPZihsYXN0QXNzZXQpICE9PSAtMSkge1xuICAgICAgICAgIG1vdmVkLnB1c2goW2xhc3RBc3NldCwgYXNzZXRdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjaGFuZ2VkLnB1c2goYXNzZXQpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgbG9nR3JvdXAoJ0NoYW5nZWQgYXNzZXRzOiAnICsgc2VjdGlvbiwgY2hhbmdlZCk7XG4gICAgICBsb2dHcm91cCgnTW92ZWQgYXNzZXRzOiAnICsgc2VjdGlvbiwgbW92ZWQpO1xuXG4gICAgICB2YXIgbW92ZWRSZXNwb25zZXMgPSBQcm9taXNlLmFsbChtb3ZlZC5tYXAoZnVuY3Rpb24gKHBhaXIpIHtcbiAgICAgICAgcmV0dXJuIGxhc3RDYWNoZS5tYXRjaChwYWlyWzBdKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgIHJldHVybiBbcGFpclsxXSwgcmVzcG9uc2VdO1xuICAgICAgICB9KTtcbiAgICAgIH0pKTtcblxuICAgICAgcmV0dXJuIGNhY2hlcy5vcGVuKENBQ0hFX05BTUUpLnRoZW4oZnVuY3Rpb24gKGNhY2hlKSB7XG4gICAgICAgIHZhciBtb3ZlID0gbW92ZWRSZXNwb25zZXMudGhlbihmdW5jdGlvbiAocmVzcG9uc2VzKSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKHJlc3BvbnNlcy5tYXAoZnVuY3Rpb24gKHBhaXIpIHtcbiAgICAgICAgICAgIHJldHVybiBjYWNoZS5wdXQocGFpclswXSwgcGFpclsxXSk7XG4gICAgICAgICAgfSkpO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwoW21vdmUsIGFkZEFsbE5vcm1hbGl6ZWQoY2FjaGUsIGNoYW5nZWQsIHtcbiAgICAgICAgICBidXN0OiBwYXJhbXMudmVyc2lvbixcbiAgICAgICAgICByZXF1ZXN0OiBwYXJhbXMucHJlZmV0Y2hSZXF1ZXN0XG4gICAgICAgIH0pXSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlbGV0ZU9ic29sZXRlKCkge1xuICAgIHJldHVybiBjYWNoZXMua2V5cygpLnRoZW4oZnVuY3Rpb24gKGtleXMpIHtcbiAgICAgIHZhciBhbGwgPSBrZXlzLm1hcChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGlmIChrZXkuaW5kZXhPZihDQUNIRV9QUkVGSVgpICE9PSAwIHx8IGtleS5pbmRleE9mKENBQ0hFX05BTUUpID09PSAwKSByZXR1cm47XG5cbiAgICAgICAgY29uc29sZS5sb2coJ1tTV106JywgJ0RlbGV0ZSBjYWNoZTonLCBrZXkpO1xuICAgICAgICByZXR1cm4gY2FjaGVzWydkZWxldGUnXShrZXkpO1xuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBQcm9taXNlLmFsbChhbGwpO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0TGFzdENhY2hlKCkge1xuICAgIHJldHVybiBjYWNoZXMua2V5cygpLnRoZW4oZnVuY3Rpb24gKGtleXMpIHtcbiAgICAgIHZhciBpbmRleCA9IGtleXMubGVuZ3RoO1xuICAgICAgdmFyIGtleSA9IHVuZGVmaW5lZDtcblxuICAgICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgICAga2V5ID0ga2V5c1tpbmRleF07XG5cbiAgICAgICAgaWYgKGtleS5pbmRleE9mKENBQ0hFX1BSRUZJWCkgPT09IDApIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoIWtleSkgcmV0dXJuO1xuXG4gICAgICB2YXIgY2FjaGUgPSB1bmRlZmluZWQ7XG5cbiAgICAgIHJldHVybiBjYWNoZXMub3BlbihrZXkpLnRoZW4oZnVuY3Rpb24gKF9jYWNoZSkge1xuICAgICAgICBjYWNoZSA9IF9jYWNoZTtcbiAgICAgICAgcmV0dXJuIF9jYWNoZS5tYXRjaChuZXcgVVJMKFNUT1JFRF9EQVRBX0tFWSwgbG9jYXRpb24pLnRvU3RyaW5nKCkpO1xuICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgaWYgKCFyZXNwb25zZSkgcmV0dXJuO1xuXG4gICAgICAgIHJldHVybiBQcm9taXNlLmFsbChbY2FjaGUsIGNhY2hlLmtleXMoKSwgcmVzcG9uc2UuanNvbigpXSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHN0b3JlQ2FjaGVEYXRhKCkge1xuICAgIHJldHVybiBjYWNoZXMub3BlbihDQUNIRV9OQU1FKS50aGVuKGZ1bmN0aW9uIChjYWNoZSkge1xuICAgICAgdmFyIGRhdGEgPSBuZXcgUmVzcG9uc2UoSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICB2ZXJzaW9uOiBwYXJhbXMudmVyc2lvbixcbiAgICAgICAgaGFzaG1hcDogaGFzaGVzTWFwXG4gICAgICB9KSk7XG5cbiAgICAgIHJldHVybiBjYWNoZS5wdXQobmV3IFVSTChTVE9SRURfREFUQV9LRVksIGxvY2F0aW9uKS50b1N0cmluZygpLCBkYXRhKTtcbiAgICB9KTtcbiAgfVxuXG4gIHNlbGYuYWRkRXZlbnRMaXN0ZW5lcignZmV0Y2gnLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICB2YXIgdXJsID0gbmV3IFVSTChldmVudC5yZXF1ZXN0LnVybCk7XG4gICAgdXJsLmhhc2ggPSAnJztcblxuICAgIHZhciB1cmxTdHJpbmcgPSB1cmwudG9TdHJpbmcoKTtcblxuICAgIC8vIE5vdCBleHRlcm5hbCwgc28gc2VhcmNoIHBhcnQgb2YgdGhlIFVSTCBzaG91bGQgYmUgc3RyaXBwZWQsXG4gICAgLy8gaWYgaXQncyBleHRlcm5hbCBVUkwsIHRoZSBzZWFyY2ggcGFydCBzaG91bGQgYmUga2VwdFxuICAgIGlmIChleHRlcm5hbHMuaW5kZXhPZih1cmxTdHJpbmcpID09PSAtMSkge1xuICAgICAgdXJsLnNlYXJjaCA9ICcnO1xuICAgICAgdXJsU3RyaW5nID0gdXJsLnRvU3RyaW5nKCk7XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIG9ubHkgR0VUIHJlcXVlc3RzXG4gICAgdmFyIGlzR0VUID0gZXZlbnQucmVxdWVzdC5tZXRob2QgPT09ICdHRVQnO1xuICAgIHZhciBhc3NldE1hdGNoZXMgPSBhbGxBc3NldHMuaW5kZXhPZih1cmxTdHJpbmcpICE9PSAtMTtcbiAgICB2YXIgY2FjaGVVcmwgPSB1cmxTdHJpbmc7XG5cbiAgICBpZiAoIWFzc2V0TWF0Y2hlcykge1xuICAgICAgdmFyIGNhY2hlUmV3cml0ZSA9IG1hdGNoQ2FjaGVNYXAoZXZlbnQucmVxdWVzdCk7XG5cbiAgICAgIGlmIChjYWNoZVJld3JpdGUpIHtcbiAgICAgICAgY2FjaGVVcmwgPSBjYWNoZVJld3JpdGU7XG4gICAgICAgIGFzc2V0TWF0Y2hlcyA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCFhc3NldE1hdGNoZXMgJiYgaXNHRVQpIHtcbiAgICAgIC8vIElmIGlzbid0IGEgY2FjaGVkIGFzc2V0IGFuZCBpcyBhIG5hdmlnYXRpb24gcmVxdWVzdCxcbiAgICAgIC8vIHBlcmZvcm0gbmV0d29yayByZXF1ZXN0IGFuZCBmYWxsYmFjayB0byBuYXZpZ2F0ZUZhbGxiYWNrVVJMIGlmIGF2YWlsYWJsZS5cbiAgICAgIC8vXG4gICAgICAvLyBSZXF1ZXN0aW5nIHdpdGggZmV0Y2hXaXRoUHJlbG9hZCgpLlxuICAgICAgLy8gUHJlbG9hZCBpcyB1c2VkIG9ubHkgaWYgbmF2aWdhdGlvblByZWxvYWQgaXMgZW5hYmxlZCBhbmRcbiAgICAgIC8vIG5hdmlnYXRpb25QcmVsb2FkIG1hcHBpbmcgaXMgbm90IHVzZWQuXG4gICAgICBpZiAobmF2aWdhdGVGYWxsYmFja1VSTCAmJiBpc05hdmlnYXRlUmVxdWVzdChldmVudC5yZXF1ZXN0KSkge1xuICAgICAgICBldmVudC5yZXNwb25kV2l0aChoYW5kbGVOYXZpZ2F0ZUZhbGxiYWNrKGZldGNoV2l0aFByZWxvYWQoZXZlbnQpKSk7XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAobmF2aWdhdGlvblByZWxvYWQgPT09IHRydWUpIHtcbiAgICAgICAgZXZlbnQucmVzcG9uZFdpdGgoZmV0Y2hXaXRoUHJlbG9hZChldmVudCkpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIFNvbWV0aGluZyBlbHNlLCBwb3NpdGl2ZSwgYnV0IG5vdCBgdHJ1ZWBcbiAgICAgIGlmIChuYXZpZ2F0aW9uUHJlbG9hZCkge1xuICAgICAgICB2YXIgcHJlbG9hZGVkUmVzcG9uc2UgPSByZXRyaXZlUHJlbG9hZGVkUmVzcG9uc2UoZXZlbnQpO1xuXG4gICAgICAgIGlmIChwcmVsb2FkZWRSZXNwb25zZSkge1xuICAgICAgICAgIGV2ZW50LnJlc3BvbmRXaXRoKHByZWxvYWRlZFJlc3BvbnNlKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gTG9naWMgZXhpc3RzIGhlcmUgaWYgbm8gY2FjaGUgbWF0Y2gsIG9yIG5vIHByZWxvYWRcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoIWFzc2V0TWF0Y2hlcyB8fCAhaXNHRVQpIHtcbiAgICAgIC8vIEZpeCBmb3IgaHR0cHM6Ly90d2l0dGVyLmNvbS93YW5kZXJ2aWV3L3N0YXR1cy82OTY4MTkyNDMyNjI4NzM2MDBcbiAgICAgIGlmICh1cmwub3JpZ2luICE9PSBsb2NhdGlvbi5vcmlnaW4gJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdGaXJlZm94LzQ0LicpICE9PSAtMSkge1xuICAgICAgICBldmVudC5yZXNwb25kV2l0aChmZXRjaChldmVudC5yZXF1ZXN0KSk7XG4gICAgICB9XG5cbiAgICAgIC8vIExvZ2ljIGV4aXN0cyBoZXJlIGlmIG5vIGNhY2hlIG1hdGNoXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gQ2FjaGUgaGFuZGxpbmcvc3RvcmluZy9mZXRjaGluZyBzdGFydHMgaGVyZVxuXG4gICAgdmFyIHJlc291cmNlID0gdW5kZWZpbmVkO1xuXG4gICAgaWYgKHJlc3BvbnNlU3RyYXRlZ3kgPT09ICduZXR3b3JrLWZpcnN0Jykge1xuICAgICAgcmVzb3VyY2UgPSBuZXR3b3JrRmlyc3RSZXNwb25zZShldmVudCwgdXJsU3RyaW5nLCBjYWNoZVVybCk7XG4gICAgfVxuICAgIC8vICdjYWNoZS1maXJzdCcgb3RoZXJ3aXNlXG4gICAgLy8gKHJlc3BvbnNlU3RyYXRlZ3kgaGFzIGJlZW4gdmFsaWRhdGVkIGJlZm9yZSlcbiAgICBlbHNlIHtcbiAgICAgICAgcmVzb3VyY2UgPSBjYWNoZUZpcnN0UmVzcG9uc2UoZXZlbnQsIHVybFN0cmluZywgY2FjaGVVcmwpO1xuICAgICAgfVxuXG4gICAgaWYgKG5hdmlnYXRlRmFsbGJhY2tVUkwgJiYgaXNOYXZpZ2F0ZVJlcXVlc3QoZXZlbnQucmVxdWVzdCkpIHtcbiAgICAgIHJlc291cmNlID0gaGFuZGxlTmF2aWdhdGVGYWxsYmFjayhyZXNvdXJjZSk7XG4gICAgfVxuXG4gICAgZXZlbnQucmVzcG9uZFdpdGgocmVzb3VyY2UpO1xuICB9KTtcblxuICBzZWxmLmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBmdW5jdGlvbiAoZSkge1xuICAgIHZhciBkYXRhID0gZS5kYXRhO1xuICAgIGlmICghZGF0YSkgcmV0dXJuO1xuXG4gICAgc3dpdGNoIChkYXRhLmFjdGlvbikge1xuICAgICAgY2FzZSAnc2tpcFdhaXRpbmcnOlxuICAgICAgICB7XG4gICAgICAgICAgaWYgKHNlbGYuc2tpcFdhaXRpbmcpIHNlbGYuc2tpcFdhaXRpbmcoKTtcbiAgICAgICAgfWJyZWFrO1xuICAgIH1cbiAgfSk7XG5cbiAgZnVuY3Rpb24gY2FjaGVGaXJzdFJlc3BvbnNlKGV2ZW50LCB1cmxTdHJpbmcsIGNhY2hlVXJsKSB7XG4gICAgaGFuZGxlTmF2aWdhdGlvblByZWxvYWQoZXZlbnQpO1xuXG4gICAgcmV0dXJuIGNhY2hlc01hdGNoKGNhY2hlVXJsLCBDQUNIRV9OQU1FKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgaWYgKHJlc3BvbnNlKSB7XG4gICAgICAgIGlmIChERUJVRykge1xuICAgICAgICAgIGNvbnNvbGUubG9nKCdbU1ddOicsICdVUkwgWycgKyBjYWNoZVVybCArICddKCcgKyB1cmxTdHJpbmcgKyAnKSBmcm9tIGNhY2hlJyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICB9XG5cbiAgICAgIC8vIExvYWQgYW5kIGNhY2hlIGtub3duIGFzc2V0c1xuICAgICAgdmFyIGZldGNoaW5nID0gZmV0Y2goZXZlbnQucmVxdWVzdCkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgICAgIGlmIChERUJVRykge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ1tTV106JywgJ1VSTCBbJyArIHVybFN0cmluZyArICddIHdyb25nIHJlc3BvbnNlOiBbJyArIHJlc3BvbnNlLnN0YXR1cyArICddICcgKyByZXNwb25zZS50eXBlKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoREVCVUcpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZygnW1NXXTonLCAnVVJMIFsnICsgdXJsU3RyaW5nICsgJ10gZnJvbSBuZXR3b3JrJyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY2FjaGVVcmwgPT09IHVybFN0cmluZykge1xuICAgICAgICAgIChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgcmVzcG9uc2VDbG9uZSA9IHJlc3BvbnNlLmNsb25lKCk7XG4gICAgICAgICAgICB2YXIgc3RvcmluZyA9IGNhY2hlcy5vcGVuKENBQ0hFX05BTUUpLnRoZW4oZnVuY3Rpb24gKGNhY2hlKSB7XG4gICAgICAgICAgICAgIHJldHVybiBjYWNoZS5wdXQodXJsU3RyaW5nLCByZXNwb25zZUNsb25lKTtcbiAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBjb25zb2xlLmxvZygnW1NXXTonLCAnQ2FjaGUgYXNzZXQ6ICcgKyB1cmxTdHJpbmcpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGV2ZW50LndhaXRVbnRpbChzdG9yaW5nKTtcbiAgICAgICAgICB9KSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBmZXRjaGluZztcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG5ldHdvcmtGaXJzdFJlc3BvbnNlKGV2ZW50LCB1cmxTdHJpbmcsIGNhY2hlVXJsKSB7XG4gICAgcmV0dXJuIGZldGNoV2l0aFByZWxvYWQoZXZlbnQpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICBpZiAocmVzcG9uc2Uub2spIHtcbiAgICAgICAgaWYgKERFQlVHKSB7XG4gICAgICAgICAgY29uc29sZS5sb2coJ1tTV106JywgJ1VSTCBbJyArIHVybFN0cmluZyArICddIGZyb20gbmV0d29yaycpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgICAgfVxuXG4gICAgICAvLyBUaHJvdyB0byByZWFjaCB0aGUgY29kZSBpbiB0aGUgY2F0Y2ggYmVsb3dcbiAgICAgIHRocm93IG5ldyBFcnJvcignUmVzcG9uc2UgaXMgbm90IG9rJyk7XG4gICAgfSlcbiAgICAvLyBUaGlzIG5lZWRzIHRvIGJlIGluIGEgY2F0Y2goKSBhbmQgbm90IGp1c3QgaW4gdGhlIHRoZW4oKSBhYm92ZVxuICAgIC8vIGNhdXNlIGlmIHlvdXIgbmV0d29yayBpcyBkb3duLCB0aGUgZmV0Y2goKSB3aWxsIHRocm93XG4gICAgWydjYXRjaCddKGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChERUJVRykge1xuICAgICAgICBjb25zb2xlLmxvZygnW1NXXTonLCAnVVJMIFsnICsgdXJsU3RyaW5nICsgJ10gZnJvbSBjYWNoZSBpZiBwb3NzaWJsZScpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY2FjaGVzTWF0Y2goY2FjaGVVcmwsIENBQ0hFX05BTUUpO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlTmF2aWdhdGlvblByZWxvYWQoZXZlbnQpIHtcbiAgICBpZiAobmF2aWdhdGlvblByZWxvYWQgJiYgdHlwZW9mIG5hdmlnYXRpb25QcmVsb2FkLm1hcCA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgIC8vIFVzZSByZXF1ZXN0Lm1vZGUgPT09ICduYXZpZ2F0ZScgaW5zdGVhZCBvZiBpc05hdmlnYXRlUmVxdWVzdFxuICAgIC8vIGJlY2F1c2UgZXZlcnl0aGluZyB3aGF0IHN1cHBvcnRzIG5hdmlnYXRpb25QcmVsb2FkIHN1cHBvcnRzXG4gICAgLy8gJ25hdmlnYXRlJyByZXF1ZXN0Lm1vZGVcbiAgICBldmVudC5wcmVsb2FkUmVzcG9uc2UgJiYgZXZlbnQucmVxdWVzdC5tb2RlID09PSAnbmF2aWdhdGUnKSB7XG4gICAgICB2YXIgbWFwcGVkID0gbmF2aWdhdGlvblByZWxvYWQubWFwKG5ldyBVUkwoZXZlbnQucmVxdWVzdC51cmwpLCBldmVudC5yZXF1ZXN0KTtcblxuICAgICAgaWYgKG1hcHBlZCkge1xuICAgICAgICBzdG9yZVByZWxvYWRlZFJlc3BvbnNlKG1hcHBlZCwgZXZlbnQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIFRlbXBvcmFyeSBpbi1tZW1vcnkgc3RvcmUgZm9yIGZhc3RlciBhY2Nlc3NcbiAgdmFyIG5hdmlnYXRpb25QcmVsb2FkU3RvcmUgPSBuZXcgTWFwKCk7XG5cbiAgZnVuY3Rpb24gc3RvcmVQcmVsb2FkZWRSZXNwb25zZShfdXJsLCBldmVudCkge1xuICAgIHZhciB1cmwgPSBuZXcgVVJMKF91cmwsIGxvY2F0aW9uKTtcbiAgICB2YXIgcHJlbG9hZFJlc3BvbnNlUHJvbWlzZSA9IGV2ZW50LnByZWxvYWRSZXNwb25zZTtcblxuICAgIG5hdmlnYXRpb25QcmVsb2FkU3RvcmUuc2V0KHByZWxvYWRSZXNwb25zZVByb21pc2UsIHtcbiAgICAgIHVybDogdXJsLFxuICAgICAgcmVzcG9uc2U6IHByZWxvYWRSZXNwb25zZVByb21pc2VcbiAgICB9KTtcblxuICAgIHZhciBpc1NhbWVQcmVsb2FkID0gZnVuY3Rpb24gaXNTYW1lUHJlbG9hZCgpIHtcbiAgICAgIHJldHVybiBuYXZpZ2F0aW9uUHJlbG9hZFN0b3JlLmhhcyhwcmVsb2FkUmVzcG9uc2VQcm9taXNlKTtcbiAgICB9O1xuXG4gICAgdmFyIHN0b3JpbmcgPSBwcmVsb2FkUmVzcG9uc2VQcm9taXNlLnRoZW4oZnVuY3Rpb24gKHJlcykge1xuICAgICAgLy8gUmV0dXJuIGlmIHByZWxvYWQgaXNuJ3QgZW5hYmxlZCBvciBoYXNuJ3QgaGFwcGVuZWRcbiAgICAgIGlmICghcmVzKSByZXR1cm47XG5cbiAgICAgIC8vIElmIG5hdmlnYXRpb25QcmVsb2FkU3RvcmUgYWxyZWFkeSBjb25zdW1lZFxuICAgICAgLy8gb3IgbmF2aWdhdGlvblByZWxvYWRTdG9yZSBhbHJlYWR5IGNvbnRhaW5zIGFub3RoZXIgcHJlbG9hZCxcbiAgICAgIC8vIHRoZW4gZG8gbm90IHN0b3JlIGFueXRoaW5nIGFuZCByZXR1cm5cbiAgICAgIGlmICghaXNTYW1lUHJlbG9hZCgpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIGNsb25lID0gcmVzLmNsb25lKCk7XG5cbiAgICAgIC8vIFN0b3JpbmcgdGhlIHByZWxvYWQgcmVzcG9uc2UgZm9yIGxhdGVyIGNvbnN1bWUgKGhhc24ndCB5ZXQgYmVlbiBjb25zdW1lZClcbiAgICAgIHJldHVybiBjYWNoZXMub3BlbihQUkVMT0FEX0NBQ0hFX05BTUUpLnRoZW4oZnVuY3Rpb24gKGNhY2hlKSB7XG4gICAgICAgIGlmICghaXNTYW1lUHJlbG9hZCgpKSByZXR1cm47XG5cbiAgICAgICAgcmV0dXJuIGNhY2hlLnB1dCh1cmwsIGNsb25lKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAoIWlzU2FtZVByZWxvYWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIGNhY2hlcy5vcGVuKFBSRUxPQURfQ0FDSEVfTkFNRSkudGhlbihmdW5jdGlvbiAoY2FjaGUpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGNhY2hlWydkZWxldGUnXSh1cmwpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgZXZlbnQud2FpdFVudGlsKHN0b3JpbmcpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmV0cml2ZUluTWVtb3J5UHJlbG9hZGVkUmVzcG9uc2UodXJsKSB7XG4gICAgaWYgKCFuYXZpZ2F0aW9uUHJlbG9hZFN0b3JlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGZvdW5kUmVzcG9uc2UgPSB1bmRlZmluZWQ7XG4gICAgdmFyIGZvdW5kS2V5ID0gdW5kZWZpbmVkO1xuXG4gICAgbmF2aWdhdGlvblByZWxvYWRTdG9yZS5mb3JFYWNoKGZ1bmN0aW9uIChzdG9yZSwga2V5KSB7XG4gICAgICBpZiAoc3RvcmUudXJsLmhyZWYgPT09IHVybC5ocmVmKSB7XG4gICAgICAgIGZvdW5kUmVzcG9uc2UgPSBzdG9yZS5yZXNwb25zZTtcbiAgICAgICAgZm91bmRLZXkgPSBrZXk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpZiAoZm91bmRSZXNwb25zZSkge1xuICAgICAgbmF2aWdhdGlvblByZWxvYWRTdG9yZVsnZGVsZXRlJ10oZm91bmRLZXkpO1xuICAgICAgcmV0dXJuIGZvdW5kUmVzcG9uc2U7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmV0cml2ZVByZWxvYWRlZFJlc3BvbnNlKGV2ZW50KSB7XG4gICAgdmFyIHVybCA9IG5ldyBVUkwoZXZlbnQucmVxdWVzdC51cmwpO1xuXG4gICAgaWYgKHNlbGYucmVnaXN0cmF0aW9uLm5hdmlnYXRpb25QcmVsb2FkICYmIG5hdmlnYXRpb25QcmVsb2FkICYmIG5hdmlnYXRpb25QcmVsb2FkLnRlc3QgJiYgbmF2aWdhdGlvblByZWxvYWQudGVzdCh1cmwsIGV2ZW50LnJlcXVlc3QpKSB7fSBlbHNlIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgZnJvbU1lbW9yeSA9IHJldHJpdmVJbk1lbW9yeVByZWxvYWRlZFJlc3BvbnNlKHVybCk7XG4gICAgdmFyIHJlcXVlc3QgPSBldmVudC5yZXF1ZXN0O1xuXG4gICAgaWYgKGZyb21NZW1vcnkpIHtcbiAgICAgIGV2ZW50LndhaXRVbnRpbChjYWNoZXMub3BlbihQUkVMT0FEX0NBQ0hFX05BTUUpLnRoZW4oZnVuY3Rpb24gKGNhY2hlKSB7XG4gICAgICAgIHJldHVybiBjYWNoZVsnZGVsZXRlJ10ocmVxdWVzdCk7XG4gICAgICB9KSk7XG5cbiAgICAgIHJldHVybiBmcm9tTWVtb3J5O1xuICAgIH1cblxuICAgIHJldHVybiBjYWNoZXNNYXRjaChyZXF1ZXN0LCBQUkVMT0FEX0NBQ0hFX05BTUUpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICBpZiAocmVzcG9uc2UpIHtcbiAgICAgICAgZXZlbnQud2FpdFVudGlsKGNhY2hlcy5vcGVuKFBSRUxPQURfQ0FDSEVfTkFNRSkudGhlbihmdW5jdGlvbiAoY2FjaGUpIHtcbiAgICAgICAgICByZXR1cm4gY2FjaGVbJ2RlbGV0ZSddKHJlcXVlc3QpO1xuICAgICAgICB9KSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXNwb25zZSB8fCBmZXRjaChldmVudC5yZXF1ZXN0KTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZU5hdmlnYXRlRmFsbGJhY2soZmV0Y2hpbmcpIHtcbiAgICByZXR1cm4gZmV0Y2hpbmdbJ2NhdGNoJ10oZnVuY3Rpb24gKCkge30pLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICB2YXIgaXNPayA9IHJlc3BvbnNlICYmIHJlc3BvbnNlLm9rO1xuICAgICAgdmFyIGlzUmVkaXJlY3QgPSByZXNwb25zZSAmJiByZXNwb25zZS50eXBlID09PSAnb3BhcXVlcmVkaXJlY3QnO1xuXG4gICAgICBpZiAoaXNPayB8fCBpc1JlZGlyZWN0ICYmICFuYXZpZ2F0ZUZhbGxiYWNrRm9yUmVkaXJlY3RzKSB7XG4gICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICAgIH1cblxuICAgICAgaWYgKERFQlVHKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdbU1ddOicsICdMb2FkaW5nIG5hdmlnYXRpb24gZmFsbGJhY2sgWycgKyBuYXZpZ2F0ZUZhbGxiYWNrVVJMICsgJ10gZnJvbSBjYWNoZScpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY2FjaGVzTWF0Y2gobmF2aWdhdGVGYWxsYmFja1VSTCwgQ0FDSEVfTkFNRSk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBtYXBBc3NldHMoKSB7XG4gICAgT2JqZWN0LmtleXMoYXNzZXRzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIGFzc2V0c1trZXldID0gYXNzZXRzW2tleV0ubWFwKGZ1bmN0aW9uIChwYXRoKSB7XG4gICAgICAgIHZhciB1cmwgPSBuZXcgVVJMKHBhdGgsIGxvY2F0aW9uKTtcblxuICAgICAgICB1cmwuaGFzaCA9ICcnO1xuXG4gICAgICAgIGlmIChleHRlcm5hbHMuaW5kZXhPZihwYXRoKSA9PT0gLTEpIHtcbiAgICAgICAgICB1cmwuc2VhcmNoID0gJyc7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdXJsLnRvU3RyaW5nKCk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIE9iamVjdC5rZXlzKGxvYWRlcnNNYXApLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgbG9hZGVyc01hcFtrZXldID0gbG9hZGVyc01hcFtrZXldLm1hcChmdW5jdGlvbiAocGF0aCkge1xuICAgICAgICB2YXIgdXJsID0gbmV3IFVSTChwYXRoLCBsb2NhdGlvbik7XG5cbiAgICAgICAgdXJsLmhhc2ggPSAnJztcblxuICAgICAgICBpZiAoZXh0ZXJuYWxzLmluZGV4T2YocGF0aCkgPT09IC0xKSB7XG4gICAgICAgICAgdXJsLnNlYXJjaCA9ICcnO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHVybC50b1N0cmluZygpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBoYXNoZXNNYXAgPSBPYmplY3Qua2V5cyhoYXNoZXNNYXApLnJlZHVjZShmdW5jdGlvbiAocmVzdWx0LCBoYXNoKSB7XG4gICAgICB2YXIgdXJsID0gbmV3IFVSTChoYXNoZXNNYXBbaGFzaF0sIGxvY2F0aW9uKTtcbiAgICAgIHVybC5zZWFyY2ggPSAnJztcbiAgICAgIHVybC5oYXNoID0gJyc7XG5cbiAgICAgIHJlc3VsdFtoYXNoXSA9IHVybC50b1N0cmluZygpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LCB7fSk7XG5cbiAgICBleHRlcm5hbHMgPSBleHRlcm5hbHMubWFwKGZ1bmN0aW9uIChwYXRoKSB7XG4gICAgICB2YXIgdXJsID0gbmV3IFVSTChwYXRoLCBsb2NhdGlvbik7XG4gICAgICB1cmwuaGFzaCA9ICcnO1xuXG4gICAgICByZXR1cm4gdXJsLnRvU3RyaW5nKCk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBhZGRBbGxOb3JtYWxpemVkKGNhY2hlLCByZXF1ZXN0cywgb3B0aW9ucykge1xuICAgIHZhciBhbGxvd0xvYWRlcnMgPSBvcHRpb25zLmFsbG93TG9hZGVycyAhPT0gZmFsc2U7XG4gICAgdmFyIGJ1c3RWYWx1ZSA9IG9wdGlvbnMgJiYgb3B0aW9ucy5idXN0O1xuICAgIHZhciByZXF1ZXN0SW5pdCA9IG9wdGlvbnMucmVxdWVzdCB8fCB7XG4gICAgICBjcmVkZW50aWFsczogJ29taXQnLFxuICAgICAgbW9kZTogJ2NvcnMnXG4gICAgfTtcblxuICAgIHJldHVybiBQcm9taXNlLmFsbChyZXF1ZXN0cy5tYXAoZnVuY3Rpb24gKHJlcXVlc3QpIHtcbiAgICAgIGlmIChidXN0VmFsdWUpIHtcbiAgICAgICAgcmVxdWVzdCA9IGFwcGx5Q2FjaGVCdXN0KHJlcXVlc3QsIGJ1c3RWYWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmZXRjaChyZXF1ZXN0LCByZXF1ZXN0SW5pdCkudGhlbihmaXhSZWRpcmVjdGVkUmVzcG9uc2UpO1xuICAgIH0pKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZXMpIHtcbiAgICAgIGlmIChyZXNwb25zZXMuc29tZShmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgcmV0dXJuICFyZXNwb25zZS5vaztcbiAgICAgIH0pKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoJ1dyb25nIHJlc3BvbnNlIHN0YXR1cycpKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGV4dHJhY3RlZCA9IFtdO1xuICAgICAgdmFyIGFkZEFsbCA9IHJlc3BvbnNlcy5tYXAoZnVuY3Rpb24gKHJlc3BvbnNlLCBpKSB7XG4gICAgICAgIGlmIChhbGxvd0xvYWRlcnMpIHtcbiAgICAgICAgICBleHRyYWN0ZWQucHVzaChleHRyYWN0QXNzZXRzV2l0aExvYWRlcnMocmVxdWVzdHNbaV0sIHJlc3BvbnNlKSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY2FjaGUucHV0KHJlcXVlc3RzW2ldLCByZXNwb25zZSk7XG4gICAgICB9KTtcblxuICAgICAgaWYgKGV4dHJhY3RlZC5sZW5ndGgpIHtcbiAgICAgICAgKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB2YXIgbmV3T3B0aW9ucyA9IGNvcHlPYmplY3Qob3B0aW9ucyk7XG4gICAgICAgICAgbmV3T3B0aW9ucy5hbGxvd0xvYWRlcnMgPSBmYWxzZTtcblxuICAgICAgICAgIHZhciB3YWl0QWxsID0gYWRkQWxsO1xuXG4gICAgICAgICAgYWRkQWxsID0gUHJvbWlzZS5hbGwoZXh0cmFjdGVkKS50aGVuKGZ1bmN0aW9uIChhbGwpIHtcbiAgICAgICAgICAgIHZhciBleHRyYWN0ZWRSZXF1ZXN0cyA9IFtdLmNvbmNhdC5hcHBseShbXSwgYWxsKTtcblxuICAgICAgICAgICAgaWYgKHJlcXVlc3RzLmxlbmd0aCkge1xuICAgICAgICAgICAgICB3YWl0QWxsID0gd2FpdEFsbC5jb25jYXQoYWRkQWxsTm9ybWFsaXplZChjYWNoZSwgZXh0cmFjdGVkUmVxdWVzdHMsIG5ld09wdGlvbnMpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKHdhaXRBbGwpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYWRkQWxsID0gUHJvbWlzZS5hbGwoYWRkQWxsKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGFkZEFsbDtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGV4dHJhY3RBc3NldHNXaXRoTG9hZGVycyhyZXF1ZXN0LCByZXNwb25zZSkge1xuICAgIHZhciBhbGwgPSBPYmplY3Qua2V5cyhsb2FkZXJzTWFwKS5tYXAoZnVuY3Rpb24gKGtleSkge1xuICAgICAgdmFyIGxvYWRlciA9IGxvYWRlcnNNYXBba2V5XTtcblxuICAgICAgaWYgKGxvYWRlci5pbmRleE9mKHJlcXVlc3QpICE9PSAtMSAmJiBsb2FkZXJzW2tleV0pIHtcbiAgICAgICAgcmV0dXJuIGxvYWRlcnNba2V5XShyZXNwb25zZS5jbG9uZSgpKTtcbiAgICAgIH1cbiAgICB9KS5maWx0ZXIoZnVuY3Rpb24gKGEpIHtcbiAgICAgIHJldHVybiAhIWE7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gUHJvbWlzZS5hbGwoYWxsKS50aGVuKGZ1bmN0aW9uIChhbGwpIHtcbiAgICAgIHJldHVybiBbXS5jb25jYXQuYXBwbHkoW10sIGFsbCk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBtYXRjaENhY2hlTWFwKHJlcXVlc3QpIHtcbiAgICB2YXIgdXJsU3RyaW5nID0gcmVxdWVzdC51cmw7XG4gICAgdmFyIHVybCA9IG5ldyBVUkwodXJsU3RyaW5nKTtcblxuICAgIHZhciByZXF1ZXN0VHlwZSA9IHVuZGVmaW5lZDtcblxuICAgIGlmIChpc05hdmlnYXRlUmVxdWVzdChyZXF1ZXN0KSkge1xuICAgICAgcmVxdWVzdFR5cGUgPSAnbmF2aWdhdGUnO1xuICAgIH0gZWxzZSBpZiAodXJsLm9yaWdpbiA9PT0gbG9jYXRpb24ub3JpZ2luKSB7XG4gICAgICByZXF1ZXN0VHlwZSA9ICdzYW1lLW9yaWdpbic7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlcXVlc3RUeXBlID0gJ2Nyb3NzLW9yaWdpbic7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjYWNoZU1hcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBtYXAgPSBjYWNoZU1hcHNbaV07XG5cbiAgICAgIGlmICghbWFwKSBjb250aW51ZTtcbiAgICAgIGlmIChtYXAucmVxdWVzdFR5cGVzICYmIG1hcC5yZXF1ZXN0VHlwZXMuaW5kZXhPZihyZXF1ZXN0VHlwZSkgPT09IC0xKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICB2YXIgbmV3U3RyaW5nID0gdW5kZWZpbmVkO1xuXG4gICAgICBpZiAodHlwZW9mIG1hcC5tYXRjaCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBuZXdTdHJpbmcgPSBtYXAubWF0Y2godXJsLCByZXF1ZXN0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5ld1N0cmluZyA9IHVybFN0cmluZy5yZXBsYWNlKG1hcC5tYXRjaCwgbWFwLnRvKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG5ld1N0cmluZyAmJiBuZXdTdHJpbmcgIT09IHVybFN0cmluZykge1xuICAgICAgICByZXR1cm4gbmV3U3RyaW5nO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGZldGNoV2l0aFByZWxvYWQoZXZlbnQpIHtcbiAgICBpZiAoIWV2ZW50LnByZWxvYWRSZXNwb25zZSB8fCBuYXZpZ2F0aW9uUHJlbG9hZCAhPT0gdHJ1ZSkge1xuICAgICAgcmV0dXJuIGZldGNoKGV2ZW50LnJlcXVlc3QpO1xuICAgIH1cblxuICAgIHJldHVybiBldmVudC5wcmVsb2FkUmVzcG9uc2UudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgIHJldHVybiByZXNwb25zZSB8fCBmZXRjaChldmVudC5yZXF1ZXN0KTtcbiAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjYWNoZXNNYXRjaChyZXF1ZXN0LCBjYWNoZU5hbWUpIHtcbiAgcmV0dXJuIGNhY2hlcy5tYXRjaChyZXF1ZXN0LCB7XG4gICAgY2FjaGVOYW1lOiBjYWNoZU5hbWVcbiAgfSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICBpZiAoaXNOb3RSZWRpcmVjdGVkUmVzcG9uc2UoKSkge1xuICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgIH1cblxuICAgIC8vIEZpeCBhbHJlYWR5IGNhY2hlZCByZWRpcmVjdGVkIHJlc3BvbnNlc1xuICAgIHJldHVybiBmaXhSZWRpcmVjdGVkUmVzcG9uc2UocmVzcG9uc2UpLnRoZW4oZnVuY3Rpb24gKGZpeGVkUmVzcG9uc2UpIHtcbiAgICAgIHJldHVybiBjYWNoZXMub3BlbihjYWNoZU5hbWUpLnRoZW4oZnVuY3Rpb24gKGNhY2hlKSB7XG4gICAgICAgIHJldHVybiBjYWNoZS5wdXQocmVxdWVzdCwgZml4ZWRSZXNwb25zZSk7XG4gICAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGZpeGVkUmVzcG9uc2U7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSlcbiAgLy8gUmV0dXJuIHZvaWQgaWYgZXJyb3IgaGFwcGVuZWQgKGNhY2hlIG5vdCBmb3VuZClcbiAgWydjYXRjaCddKGZ1bmN0aW9uICgpIHt9KTtcbn1cblxuZnVuY3Rpb24gYXBwbHlDYWNoZUJ1c3QoYXNzZXQsIGtleSkge1xuICB2YXIgaGFzUXVlcnkgPSBhc3NldC5pbmRleE9mKCc/JykgIT09IC0xO1xuICByZXR1cm4gYXNzZXQgKyAoaGFzUXVlcnkgPyAnJicgOiAnPycpICsgJ19fdW5jYWNoZT0nICsgZW5jb2RlVVJJQ29tcG9uZW50KGtleSk7XG59XG5cbmZ1bmN0aW9uIGlzTmF2aWdhdGVSZXF1ZXN0KHJlcXVlc3QpIHtcbiAgcmV0dXJuIHJlcXVlc3QubW9kZSA9PT0gJ25hdmlnYXRlJyB8fCByZXF1ZXN0LmhlYWRlcnMuZ2V0KCdVcGdyYWRlLUluc2VjdXJlLVJlcXVlc3RzJykgfHwgKHJlcXVlc3QuaGVhZGVycy5nZXQoJ0FjY2VwdCcpIHx8ICcnKS5pbmRleE9mKCd0ZXh0L2h0bWwnKSAhPT0gLTE7XG59XG5cbmZ1bmN0aW9uIGlzTm90UmVkaXJlY3RlZFJlc3BvbnNlKHJlc3BvbnNlKSB7XG4gIHJldHVybiAhcmVzcG9uc2UgfHwgIXJlc3BvbnNlLnJlZGlyZWN0ZWQgfHwgIXJlc3BvbnNlLm9rIHx8IHJlc3BvbnNlLnR5cGUgPT09ICdvcGFxdWVyZWRpcmVjdCc7XG59XG5cbi8vIEJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9Hb29nbGVDaHJvbWUvc3ctcHJlY2FjaGUvcHVsbC8yNDEvZmlsZXMjZGlmZi0zZWU5MDYwZGM3YTMxMmM2YTgyMmNhYzYzYThjNjMwYlI4NVxuZnVuY3Rpb24gZml4UmVkaXJlY3RlZFJlc3BvbnNlKHJlc3BvbnNlKSB7XG4gIGlmIChpc05vdFJlZGlyZWN0ZWRSZXNwb25zZShyZXNwb25zZSkpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHJlc3BvbnNlKTtcbiAgfVxuXG4gIHZhciBib2R5ID0gJ2JvZHknIGluIHJlc3BvbnNlID8gUHJvbWlzZS5yZXNvbHZlKHJlc3BvbnNlLmJvZHkpIDogcmVzcG9uc2UuYmxvYigpO1xuXG4gIHJldHVybiBib2R5LnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICByZXR1cm4gbmV3IFJlc3BvbnNlKGRhdGEsIHtcbiAgICAgIGhlYWRlcnM6IHJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICBzdGF0dXM6IHJlc3BvbnNlLnN0YXR1c1xuICAgIH0pO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gY29weU9iamVjdChvcmlnaW5hbCkge1xuICByZXR1cm4gT2JqZWN0LmtleXMob3JpZ2luYWwpLnJlZHVjZShmdW5jdGlvbiAocmVzdWx0LCBrZXkpIHtcbiAgICByZXN1bHRba2V5XSA9IG9yaWdpbmFsW2tleV07XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfSwge30pO1xufVxuXG5mdW5jdGlvbiBsb2dHcm91cCh0aXRsZSwgYXNzZXRzKSB7XG4gIGNvbnNvbGUuZ3JvdXBDb2xsYXBzZWQoJ1tTV106JywgdGl0bGUpO1xuXG4gIGFzc2V0cy5mb3JFYWNoKGZ1bmN0aW9uIChhc3NldCkge1xuICAgIGNvbnNvbGUubG9nKCdBc3NldDonLCBhc3NldCk7XG4gIH0pO1xuXG4gIGNvbnNvbGUuZ3JvdXBFbmQoKTtcbn1cbiAgICAgICAgV2VicGFja1NlcnZpY2VXb3JrZXIoX193cG8sIHtcbmxvYWRlcnM6IHt9LFxuY2FjaGVNYXBzOiBbXSxcbm5hdmlnYXRpb25QcmVsb2FkOiBmYWxzZSxcbn0pO1xuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuL2VtcHR5LWVudHJ5LmpzXCIpXG4gICAgICBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9vZmZsaW5lLXBsdWdpbi9saWIvbWlzYy9zdy1sb2FkZXIuanM/anNvbj0lN0IlMjJkYXRhX3Zhcl9uYW1lJTIyJTNBJTIyX193cG8lMjIlMkMlMjJsb2FkZXJzJTIyJTNBJTVCJTVEJTJDJTIyY2FjaGVNYXBzJTIyJTNBJTVCJTVEJTJDJTIybmF2aWdhdGlvblByZWxvYWQlMjIlM0ElMjJmYWxzZSUyMiU3RCEuL25vZGVfbW9kdWxlcy9vZmZsaW5lLXBsdWdpbi90cGxzL2VtcHR5LWVudHJ5LmpzXG4vLyBtb2R1bGUgaWQgPSAwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///0\n");

/***/ }),
/* 1 */
/***/ (function(module, exports) {

eval("//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiIxLmpzIiwic291cmNlc0NvbnRlbnQiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///1\n");

/***/ })
/******/ ]);